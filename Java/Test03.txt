public static boolean solution(int[] A, int[] B, int S) {
        boolean[][] graph = new boolean[S + 1][S + 1];

        for (int i = 0; i < A.length; i++) {
            graph[A[i]][i + 1] = true;
            graph[B[i]][i + 1] = true;
        }

        int[] matchedSlots = new int[S + 1];

        return isPerfectMatching(graph, matchedSlots, A.length);
    }

    private static boolean isPerfectMatching(boolean[][] graph, int[] matchedSlots, int n) {
        boolean[] visited = new boolean[graph.length];
        for (int i = 1; i <= n; i++) {
            Arrays.fill(visited, false);
            if (!findAugmentingPath(graph, matchedSlots, visited, i)) {
                return false;
            }
        }
        return true;
    }

    private static boolean findAugmentingPath(boolean[][] graph, int[] matchedSlots, boolean[] visited, int patient) {
        for (int slot = 1; slot < graph.length; slot++) {
            if (graph[slot][patient] && !visited[slot]) {
                visited[slot] = true;
                if (0 == matchedSlots[slot] || findAugmentingPath(graph, matchedSlots, visited, matchedSlots[slot])) {
                    matchedSlots[slot] = patient;
                    return true;
                }
            }
        }
        return false;
    }
